resource "aws_lambda_function" "label_lambda" {
  filename      = "${path.module}/src/label_lambda/lambda_function.py.zip"
  function_name = "labeling-lambda-function"
  description   = "Lambda for creating new Comprehend Model training data."
  role          = aws_iam_role.label_lambda_role.arn
  handler       = "lambda_function.lambda_handler"

  source_code_hash = filebase64sha256("${path.module}/src/label_lambda/lambda_function.py.zip")

  runtime     = "python3.9"
  memory_size = 512
  timeout     = 900

  ephemeral_storage {
    size = 512 # Min 512 MB and the Max 10240 MB
  }

  environment {
    variables = {
      S3_BUCKET  = aws_s3_bucket.prototype_ham_spam_bucket.bucket
      INPUT_PATH = var.s3_bucket_input_path
      SPAM_PATH  = var.s3_bucket_spam_path
      HAM_PATH   = var.s3_bucket_ham_path
      # DELETE_OBJECTS = var.s3_delete_objects
    }
  }
}

resource "aws_lambda_function" "model_lambda" {
  filename      = "${path.module}/src/model_lambda/lambda_function.py.zip"
  function_name = "modeling-lambda-function"
  description   = "Lambda for retraining the Comprehend Model with new training data generated by: labeling-lambda-function."
  role          = aws_iam_role.model_lambda_role.arn
  handler       = "lambda_function.lambda_handler"

  source_code_hash = filebase64sha256("${path.module}/src/model_lambda/lambda_function.py.zip")

  runtime     = "python3.9"
  memory_size = 512
  timeout     = 900

  environment {
    variables = {
      S3_BUCKET    = aws_s3_bucket.prototype_ham_spam_bucket.bucket
      INPUT_PATH   = var.s3_bucket_input_path
      OUTPUT_PATH  = var.s3_bucket_output_path
      ENDPOINT_URL = var.comprehend_endpoint_url
      MODEL_ARN    = var.custom_classification_model_arn
      MODEL_NAME   = var.custom_classification_model_name
      DATA_ROLE    = aws_iam_role.comprehend_data_access_role.arn
      KMS_ARN      = aws_kms_key.prototype_architecture_key.arn
    }
  }
}

resource "aws_lambda_function" "endpoint_query_lambda" {
  filename      = "${path.module}/src/endpoint_lambda/lambda_function.py.zip"
  function_name = "endpoint-querying-lambda-function"
  description   = "Lambda for querying the Comprehend Endpoint."
  role          = aws_iam_role.endpoint_query_lambda_role.arn
  handler       = "lambda_function.lambda_handler"

  source_code_hash = filebase64sha256("${path.module}/src/endpoint_lambda/lambda_function.py.zip")

  runtime     = "python3.9"
  memory_size = 512
  timeout     = 900

  environment {
    variables = {
      ENDPOINT_URL = var.comprehend_endpoint_url
    }
  }
}

resource "aws_lambda_permission" "events_invoke_label_lambda" {
  statement_id  = "AllowExecutionFromEvents"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.label_lambda.arn
  principal     = "events.amazonaws.com"
  source_arn    = aws_cloudwatch_event_rule.cron_invoke_label_lambda.arn
}

resource "aws_lambda_permission" "s3_invoke_model_lambda" {
  statement_id   = "AllowExecutionFromS3Bucket"
  action         = "lambda:InvokeFunction"
  function_name  = aws_lambda_function.model_lambda.arn
  principal      = "s3.amazonaws.com"
  source_arn     = aws_s3_bucket.prototype_ham_spam_bucket.arn
  source_account = var.account_id
}

resource "aws_lambda_permission" "apigw_invoke_endpoint_query_lambda" {
  statement_id  = "AllowInvokeAccountAutomationPutLambda"
  action        = "lambda:InvokeFunction"
  function_name = "endpoint-querying-lambda-function"
  principal     = "apigateway.amazonaws.com"

  # The /*/*/* part allows invocation from any stage, method and resource path
  # within API Gateway REST API.
  source_arn = "${aws_api_gateway_rest_api.api.execution_arn}/*/*/*"
}
